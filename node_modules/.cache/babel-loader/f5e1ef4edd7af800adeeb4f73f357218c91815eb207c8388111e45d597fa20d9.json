{"ast":null,"code":"var _jsxFileName = \"C:\\\\INTERN\\\\task1\\\\vibe-web\\\\src\\\\Contact.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Papa from 'papaparse';\nimport Navbar from './Navbar';\nimport supabase from \"./supabaseClient\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Contacts({\n  user,\n  setUser\n}) {\n  _s();\n  const [list, setList] = useState();\n  const [contact, setContact] = useState({\n    first_name: \"\",\n    last_name: \"\",\n    user: `${user}`,\n    contact_email: \"\",\n    address: \"\",\n    bought: \"\"\n  });\n  useEffect(() => {\n    async function fetchContacts() {\n      const {\n        data,\n        error\n      } = await supabase.from(\"contacts\").select('*').eq('user', user);\n      if (error) {\n        console.log(\"error fetching contacts\");\n      } else {\n        setList(data.map(obj => {\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: [obj.first_name, \" \", obj.last_name, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 30,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [\" \", obj.contact_email, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: obj.address\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 21\n          }, this);\n        }));\n      }\n    }\n  }, [user]);\n  const handleFileUpload = async event => {\n    const file = event.target.files[0];\n    const reader = new FileReader();\n    reader.onload = async e => {\n      console.log('File loaded successfully.');\n      const text = e.target.result;\n      console.log('File content:', text);\n      const {\n        data,\n        errors\n      } = Papa.parse(text, {\n        header: true,\n        skipEmptyLines: true\n      });\n      console.log('Parsed data:', data);\n      if (errors.length > 0) {\n        console.error('CSV parsing error:', errors);\n        return;\n      }\n      const dataWithEmail = data.map(record => ({\n        ...record,\n        user: user\n      }));\n\n      // Uploading to Supabase\n      const {\n        error\n      } = await supabase.from('contacts').insert(dataWithEmail);\n      if (error) {\n        console.error('Error inserting data:', error);\n      } else {\n        // Update state with new cards if needed\n        console.log('Data inserted successfully:', dataWithEmail);\n        setList(prevList => [...prevList, ...dataWithEmail.map(obj => {\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: [obj.first_name, \" \", obj.last_name, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [\" \", obj.contact_email, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: obj.address\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 25\n          }, this);\n        })]);\n      }\n    };\n    reader.readAsText(file);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      setUser: setUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contacts-cont\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".csv\",\n          id: \"csvFileInput\",\n          onChange: handleFileUpload,\n          style: {\n            display: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"csvFileInput\",\n          className: \"contact-import\",\n          children: \" Import\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"contact-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Address\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: list\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n}\n_s(Contacts, \"bZmokA09B9TQWMUM/1H7CElElIU=\");\n_c = Contacts;\nvar _c;\n$RefreshReg$(_c, \"Contacts\");","map":{"version":3,"names":["React","useEffect","useState","Papa","Navbar","supabase","jsxDEV","_jsxDEV","Contacts","user","setUser","_s","list","setList","contact","setContact","first_name","last_name","contact_email","address","bought","fetchContacts","data","error","from","select","eq","console","log","map","obj","children","fileName","_jsxFileName","lineNumber","columnNumber","handleFileUpload","event","file","target","files","reader","FileReader","onload","e","text","result","errors","parse","header","skipEmptyLines","length","dataWithEmail","record","insert","prevList","readAsText","className","type","accept","id","onChange","style","display","htmlFor","_c","$RefreshReg$"],"sources":["C:/INTERN/task1/vibe-web/src/Contact.js"],"sourcesContent":["import React,{useEffect, useState} from \"react\";\r\nimport Papa from 'papaparse';\r\nimport Navbar from './Navbar'\r\nimport supabase from \"./supabaseClient\";\r\n\r\nexport default function Contacts({user,setUser}){\r\n    const [list, setList] = useState()\r\n    const[contact, setContact] = useState({\r\n        first_name: \"\",\r\n        last_name: \"\",\r\n        user: `${user}`,\r\n        contact_email: \"\",\r\n        address: \"\",\r\n        bought: \"\",\r\n    })\r\n\r\n    useEffect(()=>{\r\n        async function fetchContacts(){\r\n            const {data,error} = await supabase\r\n            .from(\"contacts\")\r\n            .select('*')\r\n            .eq('user', user);\r\n\r\n            if(error){\r\n                console.log(\"error fetching contacts\")\r\n            }else{\r\n                setList(data.map(obj => {\r\n                    return(\r\n                    <tr>\r\n                    <td>{obj.first_name} {obj.last_name} </td>\r\n                    <td> {obj.contact_email} </td>\r\n                    <td>{obj.address}</td>\r\n                    </tr>\r\n                    )\r\n                }))\r\n            }\r\n        }\r\n\r\n    },[user])\r\n\r\n    const handleFileUpload = async (event) => {\r\n        const file = event.target.files[0];\r\n        const reader = new FileReader();\r\n\r\n        reader.onload = async (e) => {\r\n            console.log('File loaded successfully.');\r\n\r\n            const text = e.target.result;\r\n            console.log('File content:', text);\r\n\r\n            const { data, errors } = Papa.parse(text, {\r\n                header: true,\r\n                skipEmptyLines: true\r\n            });\r\n\r\n            console.log('Parsed data:', data);\r\n\r\n            if (errors.length > 0) {\r\n                console.error('CSV parsing error:', errors);\r\n                return;\r\n            }\r\n\r\n            const dataWithEmail = data.map(record => ({\r\n                ...record,\r\n                user: user,\r\n            }));\r\n\r\n            // Uploading to Supabase\r\n            const { error } = await supabase\r\n                .from('contacts')\r\n                .insert(dataWithEmail);\r\n\r\n            if (error) {\r\n                console.error('Error inserting data:', error);\r\n            } else {\r\n                // Update state with new cards if needed\r\n                console.log('Data inserted successfully:', dataWithEmail);\r\n                setList(prevList => [\r\n                    ...prevList,\r\n                    ...dataWithEmail.map(obj => {\r\n                        return(\r\n                        <tr>\r\n                        <td>{obj.first_name} {obj.last_name} </td>\r\n                        <td> {obj.contact_email} </td>\r\n                        <td>{obj.address}</td>\r\n                        </tr>\r\n                        )\r\n                    })\r\n                ]);            \r\n            }\r\n        };\r\n\r\n        reader.readAsText(file);\r\n    };\r\n\r\n\r\n    return(\r\n        <div>\r\n            <Navbar setUser={setUser}/>\r\n        <div className=\"contacts-cont\">\r\n\r\n            <div>\r\n            <input\r\n                type=\"file\"\r\n                accept=\".csv\"\r\n                id=\"csvFileInput\"\r\n                onChange={handleFileUpload}\r\n                style={{ display: 'none' }}\r\n            />\r\n            <label htmlFor=\"csvFileInput\" className=\"contact-import\"> Import</label>\r\n            </div>\r\n\r\n            <table className=\"contact-table\">\r\n                <thead>\r\n                    <tr>\r\n                    <th>Name</th>\r\n                    <th>Email</th>\r\n                    <th>Address</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {list}\r\n                </tbody>\r\n            </table>\r\n\r\n        </div>\r\n        </div>\r\n    )\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}