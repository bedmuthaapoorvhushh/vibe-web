{"ast":null,"code":"import React,{useEffect,useState,useRef}from\"react\";import Papa from\"papaparse\";import Navbar from\"./Navbar\";import supabase from\"./supabaseClient\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function Contacts(_ref){let{user,setUser}=_ref;const[currentPage,setCurrentPage]=useState(1);const[cardsPerPage]=useState(6);const pagebtnRef=useRef(null);const[list,setList]=useState([]);const[selectedContacts,setSelectedContacts]=useState({});const[contact,setContact]=useState({first_name:\"\",last_name:\"\",user:\"\".concat(user),contact_email:\"\",address:\"\",bought:\"\"});useEffect(()=>{async function fetchContacts(){const{data,error}=await supabase.from(\"contacts\").select(\"*\").eq(\"user\",user);if(error){console.log(\"error fetching contacts\");}else{setList(data);}}fetchContacts();},[user]);useEffect(()=>{const rowheight=document.querySelector(\".contact-table\").offsetHeight;pagebtnRef.current.style.top=\"\".concat(300+rowheight,\"px\");});const handleFileUpload=async event=>{const file=event.target.files[0];const reader=new FileReader();reader.onload=async e=>{console.log(\"File loaded successfully.\");const text=e.target.result;console.log(\"File content:\",text);const{data,errors}=Papa.parse(text,{header:true,skipEmptyLines:true});console.log(\"Parsed data:\",data);if(errors.length>0){console.error(\"CSV parsing error:\",errors);return;}const dataWithEmail=data.map(record=>({...record,user:\"\".concat(user)}));// Uploading to Supabase\nconst{error}=await supabase.from(\"contacts\").insert(dataWithEmail);if(error){console.error(\"Error inserting data:\",error);}else{// Update state with new cards if needed\nconsole.log(\"Data inserted successfully:\",dataWithEmail);setList(prevList=>[...prevList,...dataWithEmail]);}};reader.readAsText(file);};const handleCheckboxChange=index=>{setSelectedContacts(prevSelectedContacts=>({...prevSelectedContacts,[index]:!prevSelectedContacts[index]}));};// Get current cards\nconst indexOfLastCard=currentPage*cardsPerPage;const indexOfFirstCard=indexOfLastCard-cardsPerPage;const currentList=list.slice(indexOfFirstCard,indexOfLastCard);// Change page\nconst paginate=pageNumber=>setCurrentPage(pageNumber);// Calculate total pages\nconst totalPages=Math.ceil(list.length/cardsPerPage);return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Navbar,{setUser:setUser}),/*#__PURE__*/_jsxs(\"div\",{className:\"contacts-cont\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"file\",accept:\".csv\",id:\"csvFileInput\",onChange:handleFileUpload,style:{display:\"none\"}}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"csvFileInput\",className:\"contact-import\",children:\"Import\"})]}),/*#__PURE__*/_jsx(\"button\",{className:\"contact-new\",children:\"New\"}),/*#__PURE__*/_jsxs(\"table\",{className:\"contact-table\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{className:\"contact-table-head-cell\",children:\"S.No\"}),/*#__PURE__*/_jsx(\"th\",{className:\"contact-table-head-cell\",children:\"Name\"}),/*#__PURE__*/_jsx(\"th\",{className:\"contact-table-head-cell\",children:\"Email\"}),/*#__PURE__*/_jsx(\"th\",{className:\"contact-table-head-cell\",children:\"Address\"}),/*#__PURE__*/_jsx(\"th\",{className:\"contact-table-head-cell\",children:\"Action\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:currentList.map((obj,index)=>/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{className:\"contact-table-row-cells\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"contact-table-cell-content\",children:[/*#__PURE__*/_jsx(\"input\",{className:\"contact-checkbox\",type:\"checkbox\",checked:!!selectedContacts[indexOfFirstCard+index],onChange:()=>handleCheckboxChange(indexOfFirstCard+index)}),indexOfFirstCard+index+1]})}),/*#__PURE__*/_jsxs(\"td\",{className:\"contact-table-row-cells\",children:[obj.first_name,\" \",obj.last_name]}),/*#__PURE__*/_jsx(\"td\",{className:\"contact-table-row-cells\",children:obj.contact_email}),/*#__PURE__*/_jsx(\"td\",{className:\"contact-table-row-cells\",children:obj.address}),/*#__PURE__*/_jsx(\"td\",{className:\"contact-table-row-cells\",children:\"Delete\"})]},index))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"pagination\",ref:pagebtnRef,children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>paginate(1),disabled:currentPage===1,children:\"First\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>paginate(currentPage-1),disabled:currentPage===1,children:\"Previous\"}),Array.from({length:totalPages},(_,i)=>i+1).map(pageNumber=>/*#__PURE__*/_jsx(\"button\",{onClick:()=>paginate(pageNumber),className:currentPage===pageNumber?\"active\":\"\",children:pageNumber},pageNumber)),/*#__PURE__*/_jsx(\"button\",{onClick:()=>paginate(currentPage+1),disabled:currentPage===totalPages,children:\"Next\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>paginate(totalPages),disabled:currentPage===totalPages,children:\"Last\"})]})]})]});}","map":{"version":3,"names":["React","useEffect","useState","useRef","Papa","Navbar","supabase","jsx","_jsx","jsxs","_jsxs","Contacts","_ref","user","setUser","currentPage","setCurrentPage","cardsPerPage","pagebtnRef","list","setList","selectedContacts","setSelectedContacts","contact","setContact","first_name","last_name","concat","contact_email","address","bought","fetchContacts","data","error","from","select","eq","console","log","rowheight","document","querySelector","offsetHeight","current","style","top","handleFileUpload","event","file","target","files","reader","FileReader","onload","e","text","result","errors","parse","header","skipEmptyLines","length","dataWithEmail","map","record","insert","prevList","readAsText","handleCheckboxChange","index","prevSelectedContacts","indexOfLastCard","indexOfFirstCard","currentList","slice","paginate","pageNumber","totalPages","Math","ceil","children","className","type","accept","id","onChange","display","htmlFor","obj","checked","ref","onClick","disabled","Array","_","i"],"sources":["C:/INTERN/task1/vibe-web/src/Contact.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport Papa from \"papaparse\";\r\nimport Navbar from \"./Navbar\";\r\nimport supabase from \"./supabaseClient\";\r\n\r\nexport default function Contacts({ user, setUser }) {\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [cardsPerPage] = useState(6);\r\n  const pagebtnRef = useRef(null);\r\n  const [list, setList] = useState([]);\r\n  const [selectedContacts, setSelectedContacts] = useState({});\r\n  const [contact, setContact] = useState({\r\n    first_name: \"\",\r\n    last_name: \"\",\r\n    user: `${user}`,\r\n    contact_email: \"\",\r\n    address: \"\",\r\n    bought: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    async function fetchContacts() {\r\n      const { data, error } = await supabase\r\n        .from(\"contacts\")\r\n        .select(\"*\")\r\n        .eq(\"user\", user);\r\n\r\n      if (error) {\r\n        console.log(\"error fetching contacts\");\r\n      } else {\r\n        setList(data);\r\n      }\r\n    }\r\n\r\n    fetchContacts();\r\n  }, [user]);\r\n\r\n  useEffect(() => {\r\n    const rowheight = document.querySelector(\".contact-table\").offsetHeight;\r\n    pagebtnRef.current.style.top = `${300 + rowheight}px`;\r\n  });\r\n\r\n  const handleFileUpload = async (event) => {\r\n    const file = event.target.files[0];\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = async (e) => {\r\n      console.log(\"File loaded successfully.\");\r\n\r\n      const text = e.target.result;\r\n      console.log(\"File content:\", text);\r\n\r\n      const { data, errors } = Papa.parse(text, {\r\n        header: true,\r\n        skipEmptyLines: true,\r\n      });\r\n\r\n      console.log(\"Parsed data:\", data);\r\n\r\n      if (errors.length > 0) {\r\n        console.error(\"CSV parsing error:\", errors);\r\n        return;\r\n      }\r\n\r\n      const dataWithEmail = data.map((record) => ({\r\n        ...record,\r\n        user: `${user}`,\r\n      }));\r\n\r\n      // Uploading to Supabase\r\n      const { error } = await supabase.from(\"contacts\").insert(dataWithEmail);\r\n\r\n      if (error) {\r\n        console.error(\"Error inserting data:\", error);\r\n      } else {\r\n        // Update state with new cards if needed\r\n        console.log(\"Data inserted successfully:\", dataWithEmail);\r\n        setList((prevList) => [...prevList, ...dataWithEmail]);\r\n      }\r\n    };\r\n\r\n    reader.readAsText(file);\r\n  };\r\n\r\n    const handleCheckboxChange = (index) => {\r\n        setSelectedContacts((prevSelectedContacts) => ({\r\n        ...prevSelectedContacts,\r\n        [index]: !prevSelectedContacts[index],\r\n        }));\r\n    };\r\n\r\n  // Get current cards\r\n    const indexOfLastCard = currentPage * cardsPerPage;\r\n    const indexOfFirstCard = indexOfLastCard - cardsPerPage;\r\n    const currentList = list.slice(indexOfFirstCard, indexOfLastCard);\r\n\r\n  // Change page\r\n    const paginate = (pageNumber) => setCurrentPage(pageNumber);\r\n\r\n  // Calculate total pages\r\n    const totalPages = Math.ceil(list.length / cardsPerPage);\r\n\r\nreturn (\r\n    <div>\r\n      <Navbar setUser={setUser} />\r\n      <div className=\"contacts-cont\">\r\n        <div>\r\n          <input\r\n            type=\"file\"\r\n            accept=\".csv\"\r\n            id=\"csvFileInput\"\r\n            onChange={handleFileUpload}\r\n            style={{ display: \"none\" }}\r\n          />\r\n          <label htmlFor=\"csvFileInput\" className=\"contact-import\">\r\n            Import\r\n          </label>\r\n        </div>\r\n\r\n        <button className=\"contact-new\">New</button>\r\n\r\n        <table className=\"contact-table\">\r\n          <thead>\r\n            <tr>\r\n              <th className=\"contact-table-head-cell\">S.No</th>\r\n              <th className=\"contact-table-head-cell\">Name</th>\r\n              <th className=\"contact-table-head-cell\">Email</th>\r\n              <th className=\"contact-table-head-cell\">Address</th>\r\n              <th className=\"contact-table-head-cell\">Action</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {currentList.map((obj, index) => (\r\n            <tr key={index}>\r\n                <td className=\"contact-table-row-cells\">\r\n                <div className=\"contact-table-cell-content\">\r\n                <input\r\n                    className=\"contact-checkbox\"\r\n                    type=\"checkbox\"\r\n                    checked={!!selectedContacts[indexOfFirstCard + index]}\r\n                    onChange={() => handleCheckboxChange(indexOfFirstCard + index)}\r\n                />\r\n                {indexOfFirstCard + index + 1}\r\n                </div>\r\n                </td>\r\n                <td className=\"contact-table-row-cells\">{obj.first_name} {obj.last_name}</td>\r\n                <td className=\"contact-table-row-cells\">{obj.contact_email}</td>\r\n                <td className=\"contact-table-row-cells\">{obj.address}</td>\r\n                <td className=\"contact-table-row-cells\">Delete</td>\r\n            </tr>\r\n            ))}\r\n        </tbody>\r\n        </table>\r\n\r\n        <div className=\"pagination\" ref={pagebtnRef}>\r\n        <button onClick={() => paginate(1)} disabled={currentPage === 1}>\r\n            First\r\n        </button>\r\n        <button\r\n            onClick={() => paginate(currentPage - 1)}\r\n            disabled={currentPage === 1}\r\n        >\r\n            Previous\r\n        </button>\r\n        {Array.from({ length: totalPages }, (_, i) => i + 1).map(\r\n            (pageNumber) => (\r\n            <button\r\n                key={pageNumber}\r\n                onClick={() => paginate(pageNumber)}\r\n                className={currentPage === pageNumber ? \"active\" : \"\"}\r\n            >\r\n                {pageNumber}\r\n            </button>\r\n            )\r\n        )}\r\n        <button\r\n            onClick={() => paginate(currentPage + 1)}\r\n            disabled={currentPage === totalPages}\r\n        >\r\n            Next\r\n        </button>\r\n        <button\r\n            onClick={() => paginate(totalPages)}\r\n            disabled={currentPage === totalPages}\r\n        >\r\n            Last\r\n        </button>\r\n        </div>\r\n    </div>\r\n    </div>\r\n);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}